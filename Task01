import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Manipulator parameters
L1 = 2  # Length of the first link
L2 = 2  # Length of the second link

# Path equation
def desired_curve(t):
    x = 2*np.cos(t)
    y = 0.5*np.sin(t)
    return x, y

def inverse_kinematics(x, y):
    r = np.sqrt(x**2 + y**2)
    q1 = np.arctan2(y, x) - np.arctan2(L2 * np.sqrt(1 - ((x**2 + y**2 - L1**2 - L2**2) / (2 * L1 * L2))**2), L1 + L2 * ((x**2 + y**2 - L1**2 - L2**2) / (2 * L1 * L2)))
    q2 = np.arctan2(np.sqrt(1 - ((x**2 + y**2 - L1**2 - L2**2) / (2 * L1 * L2))**2), ((x**2 + y**2 - L1**2 - L2**2) / (2 * L1 * L2)))
    return q1, q2

timesteps = 1000
t_vals = np.linspace(0, 2 * np.pi, timesteps)

# Animation
fig, ax = plt.subplots()
ax.set_xlim(-2, 2)
ax.set_ylim(-2, 2)

link1, = ax.plot([], [], 'b-', lw=2)
link2, = ax.plot([], [], 'g-', lw=2)
endpoint, = ax.plot([], [], 'ro')

def fun_animation(frame):
    t_val = t_vals[frame]
    x_d, y_d = desired_curve(t_val)
    q1, q2 = inverse_kinematics(x_d, y_d)
    x1 = L1 * np.cos(q1)
    y1 = L1 * np.sin(q1)
    x2 = x1 + L2 * np.cos(q1 + q2)
    y2 = y1 + L2 * np.sin(q1 + q2)
    link1.set_data([0, x1], [0, y1])
    link2.set_data([x1, x2], [y1, y2])
    endpoint.set_data(x2, y2)
    return link1, link2, endpoint   

ani = FuncAnimation(fig, fun_animation, frames=timesteps, blit=True)
plt.show()
